////////////     For User Allow Button  Code Process Creations  ////////////////////////////////////////////////////////

DECLARE
   V_level_1 VARCHAR2(1000);
   V_level_2 VARCHAR2(1000);
   V_level_3 VARCHAR2(1000);
   V_level_4 VARCHAR2(1000);
   V_level_5 VARCHAR2(1000);
   V_level_6 VARCHAR2(1000);
   V_found_1 NUMBER;
   V_found_2 NUMBER;
   V_found_3 NUMBER;
   V_found_4 NUMBER;
   V_found_5 NUMBER;
   V_found_6 NUMBER;
BEGIN
   -- Loop through Level 1 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_1, '[^:]+', 1, LEVEL)) AS V_level_1
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_1, ':') + 1
   )
   LOOP
      IF i.V_level_1 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_1 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_1 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_1 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_1,
               'Y'
            );
         ELSIF V_found_1 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_1 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 2 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_2, '[^:]+', 1, LEVEL)) AS V_level_2
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_2, ':') + 1
   )
   LOOP
      IF i.V_level_2 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_2 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_2 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_2 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_2,
               'Y'
            );
         ELSIF V_found_2 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_2 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 3 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_3, '[^:]+', 1, LEVEL)) AS V_level_3
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_3, ':') + 1
   )
   LOOP
      IF i.V_level_3 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_3 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_3 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_3 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_3,
               'Y'
            );
         ELSIF V_found_3 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_3 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 4 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_4, '[^:]+', 1, LEVEL)) AS V_level_4
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_4, ':') + 1
   )
   LOOP
      IF i.V_level_4 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_4 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_4 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_4 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_4,
               'Y'
            );
         ELSIF V_found_4 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_4 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 5 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_5, '[^:]+', 1, LEVEL)) AS V_level_5
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_5, ':') + 1
   )
   LOOP
      IF i.V_level_5 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_5 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_5 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_5 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_5,
               'Y'
            );
         ELSIF V_found_5 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_5 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 6 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_6, '[^:]+', 1, LEVEL)) AS V_level_6
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_6, ':') + 1
   )
   LOOP
      IF i.V_level_6 IS NOT NULL THEN
         SELECT COUNT(*) INTO V_found_6 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_6 
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_6 = 0 THEN
            -- Insert new record if not found
            INSERT INTO AB_UM_USER_ACCESS (
               ACCESS_TYPE,
               GROUP_ID,
               MENU_ID,
               STATUS
            ) VALUES (
               :P22_MENU_LIST,
               :P22_GROUP_ID,
               i.V_level_6,
               'Y'
            );
         ELSIF V_found_6 = 1 THEN
            -- Update existing record if found
            UPDATE AB_UM_USER_ACCESS 
            SET STATUS = 'Y'
            WHERE MENU_ID = i.V_level_6 
              AND STATUS = 'N'
              AND GROUP_ID = :P22_GROUP_ID;
         END IF;
      END IF;
   END LOOP;

END;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////FOR DISS ALLOW BUTTON PROCESS CODE ///////////////////////////////////////////////////////////////////////////////////////////////////////
DECLARE
   V_level_1 VARCHAR2(1000);
   V_level_2 VARCHAR2(1000);
   V_level_3 VARCHAR2(1000);
   V_level_4 VARCHAR2(1000);
   V_level_5 VARCHAR2(1000);
   V_level_6 VARCHAR2(1000);
   V_found_1 NUMBER;
   V_found_2 NUMBER;
   V_found_3 NUMBER;
   V_found_4 NUMBER;
   V_found_5 NUMBER;
   V_found_6 NUMBER;
BEGIN
   -- Loop through Level 1 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_1, '[^:]+', 1, LEVEL)) AS V_level_1
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_1, ':') + 1
   )
   LOOP
      IF i.V_level_1 >= 0 THEN
         SELECT COUNT(*) INTO V_found_1 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_1 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_1  =1 THEN
            UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_1 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 2 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_2, '[^:]+', 1, LEVEL)) AS V_level_2
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_2, ':') + 1
   )
   LOOP
      IF i.V_level_2 >= 0 THEN
         SELECT COUNT(*) INTO V_found_2 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_2 
         AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_2 = 1 THEN
               UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_2 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 3 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_3, '[^:]+', 1, LEVEL)) AS V_level_3
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_3, ':') + 1
   )
   LOOP
      IF i.V_level_3 >= 0 THEN
         SELECT COUNT(*) INTO V_found_3 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_3 
         AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_3 = 1 THEN
             UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_3 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
         END IF;
   END LOOP;

   -- Loop through Level 4 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_4, '[^:]+', 1, LEVEL)) AS V_level_4
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_4, ':') + 1
   )
   LOOP
      IF i.V_level_4 >= 0 THEN
         SELECT COUNT(*) INTO V_found_4 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_4 
         AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_4 = 1 THEN
               UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_4 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 5 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_5, '[^:]+', 1, LEVEL)) AS V_level_5
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_5, ':') + 1
   )
   LOOP
      IF i.V_level_5 >= 0 THEN
         SELECT COUNT(*) INTO V_found_5 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_5 
         AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_5 = 1 THEN
               UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_5 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

   -- Loop through Level 6 segments
   FOR i IN (
      SELECT 
         TRIM(REGEXP_SUBSTR(:P22_LEVEL_6, '[^:]+', 1, LEVEL)) AS V_level_6
      FROM dual
      CONNECT BY LEVEL <= REGEXP_COUNT(:P22_LEVEL_6, ':') + 1
   )
   LOOP
      IF i.V_level_6 >= 0 THEN
         SELECT COUNT(*) INTO V_found_6 
         FROM AB_UM_USER_ACCESS
         WHERE MENU_ID = i.V_level_6 
         AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;

         IF V_found_6 = 1 THEN
                UPDATE AB_UM_USER_ACCESS 
               SET STATUS='N'
        WHERE MENU_ID = i.V_level_6 
           AND STATUS='Y'
           AND GROUP_ID = :P22_GROUP_ID;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

END;





////////////////////////////////////////////////////Apex Fancy Tree ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SELECT 
/* REQUIRED - positive number id of the element (should start with 1 or higher) */
     AM.MENU_ID AS ID,
/* REQUIRED - positive number id of the parent (top parent should be 0) */
    AM.PARENT_MENU_ID AS PARENT_ID,
/* REQUIRED - title of the item */
     AM.MENU_DESCRIPTION ||' - ' ||to_number( AM.PAGE_NO ) AS TITLE,/* tooltip for the item */
/* REQUIRED when use select function - is set to items when selected */
     AM.MENU_ID AS VALUE,
/* REQUIRED when use select function - is mapping value for typeSettings in config json */
      CASE     WHEN level = 1 THEN 1 
               WHEN level = 2 THEN 2
               WHEN level = 3 THEN 3 
               WHEN level = 4 THEN 4 
               WHEN level = 5 THEN 5
               WHEN level = 6 THEN 6  END AS TYPE,
/* Optional - set tooltip for this item */
     'This is ' || AM.MENU_ID AS TOOLTIP,
/* Optional - set custom icon for item */
     CASE WHEN level = 1     THEN      'fa fa-number-1'

               WHEN level = 2 THEN 'fa fa-number-2' 

               WHEN level = 3 THEN 'fa fa-number-3'

               WHEN level = 4 THEN 'fa fa-number-4'

               WHEN level = 5 THEN 'fa fa-number-5'

               WHEN level = 6 THEN 'fa fa-number-6' END AS ICON,
/* Optional - set which nodes should be selcted on load (0 or null - not selected; 1 - selected)*/
    CASE 
        WHEN :P22_ASSIGNING_TYPE = 'Y' AND EXISTS (
            SELECT 1
            FROM AB_UM_USER_ACCESS AU
            WHERE AU.MENU_ID = AM.MENU_ID
              AND AU.GROUP_ID = :P22_GROUP_ID
              AND AU.STATUS='Y'
        ) THEN 1
        WHEN :P22_ASSIGNING_TYPE = 'N' AND NOT EXISTS (
            SELECT 1
            FROM AB_UM_USER_ACCESS AU
            WHERE AU.MENU_ID = AM.MENU_ID
              AND AU.GROUP_ID = :P22_GROUP_ID
              AND AU.STATUS='Y'
        ) THEN 1
        WHEN :P22_ASSIGNING_TYPE IS NULL THEN 1
        WHEN :P22_ASSIGNING_TYPE='U'  THEN NULL
    END AS SELECTED,
/* Optional - set if this item is expanded or not (0 or null - not expanded; 1 - expanded)*/
     NULL EXPANDED,
/* Optional - enable or disable checkbox for this item (0 or null - no checkbox; 1 - checkbox)*/
     1 AS CHECKBOX,
/* Optional - used to set item read only (0 or null - selectable; 1 - unselectable)*/
     0 AS UNSELECTABLE
/* activate link on click of the node */
     --,'https://linktr.ee/ronny.weiss' AS LINK
from AB_APP_MENU_REGISTRATION AM
where AM.APPLICATION_ID = :P22_APPLICATION_ID --
--AND upper(MENU_DESCRIPTION) like case when :P5_SEARCH is not null then upper('%'||:P5_SEARCH||'%') else upper(MENU_DESCRIPTION) end--and  SUBSTR(entry_target,1,10) <> 'javascript'
and MENU_TYPE= :P22_MENU_LIST
AND AM.STATUS='Y'
start with nvl(AM.PARENT_MENU_ID,0) = 0
connect by prior AM.MENU_ID = AM.PARENT_MENU_ID
order siblings by AM.MENU_ID--MENU_TYPE,SERIAL_NO


